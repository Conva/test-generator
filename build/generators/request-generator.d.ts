/// <reference types="node" />
import { IncomingHttpHeaders } from "http";
import { ControllerOperation } from "../operation/code/controller";
export interface UserSpecifiedProxyOptions {
    resource?: string;
    accountId?: string;
    stage?: string;
}
export declare type ProxyOptions = {
    body?: any;
    path?: string;
    method?: string;
    additionalHeaders?: IncomingHttpHeaders;
    additionalClaims?: {};
} & UserSpecifiedProxyOptions;
export declare const testRequestFrom: <ResponseType_1 extends {}>({ endpoint, expected, claims, type, postBody }: ControllerOperation<ResponseType_1>) => {
    response: {
        statusCode: {
            body?: ResponseType_1 | undefined;
            statusCode: number;
        };
        headers: {};
        multiValueHeaders: {
            "Content-Type": string[];
        };
        body: string;
        isBase64Encoded: boolean;
    };
    request: {
        body: any;
        headers: {
            "content-type": string;
            "user-agent": string;
            accept: string;
            "cache-control": string;
            "postman-token": string;
            host: string;
            "accept-encoding": string;
            "content-length": string;
            connection: string;
            'accept-language'?: string | undefined;
            'accept-patch'?: string | undefined;
            'accept-ranges'?: string | undefined;
            'access-control-allow-credentials'?: string | undefined;
            'access-control-allow-headers'?: string | undefined;
            'access-control-allow-methods'?: string | undefined;
            'access-control-allow-origin'?: string | undefined;
            'access-control-expose-headers'?: string | undefined;
            'access-control-max-age'?: string | undefined;
            'age'?: string | undefined;
            'allow'?: string | undefined;
            'alt-svc'?: string | undefined;
            'authorization'?: string | undefined;
            'content-disposition'?: string | undefined;
            'content-encoding'?: string | undefined;
            'content-language'?: string | undefined;
            'content-location'?: string | undefined;
            'content-range'?: string | undefined;
            'cookie'?: string | undefined;
            'date'?: string | undefined;
            'expect'?: string | undefined;
            'expires'?: string | undefined;
            'forwarded'?: string | undefined;
            'from'?: string | undefined;
            'if-match'?: string | undefined;
            'if-modified-since'?: string | undefined;
            'if-none-match'?: string | undefined;
            'if-unmodified-since'?: string | undefined;
            'last-modified'?: string | undefined;
            'location'?: string | undefined;
            'pragma'?: string | undefined;
            'proxy-authenticate'?: string | undefined;
            'proxy-authorization'?: string | undefined;
            'public-key-pins'?: string | undefined;
            'range'?: string | undefined;
            'referer'?: string | undefined;
            'retry-after'?: string | undefined;
            'set-cookie'?: string[] | undefined;
            'strict-transport-security'?: string | undefined;
            'tk'?: string | undefined;
            'trailer'?: string | undefined;
            'transfer-encoding'?: string | undefined;
            'upgrade'?: string | undefined;
            'vary'?: string | undefined;
            'via'?: string | undefined;
            'warning'?: string | undefined;
            'www-authenticate'?: string | undefined;
        };
    };
    proxy: {
        body: string | null;
        resource: string;
        path: string;
        httpMethod: string;
        isBase64Encoded: string;
        queryStringParameters: {
            foo: string;
        };
        pathParameters: {
            proxy: string;
        };
        stageVariables: {
            baz: string;
        };
        headers: {
            "CloudFront-Forwarded-Proto": string;
            "CloudFront-Is-Desktop-Viewer": string;
            "CloudFront-Is-Mobile-Viewer": string;
            "CloudFront-Is-SmartTV-Viewer": string;
            "CloudFront-Is-Tablet-Viewer": string;
            "CloudFront-Viewer-Country": string;
            "Upgrade-Insecure-Requests": string;
            Via: string;
            "X-Amz-Cf-Id": string;
            "X-Forwarded-For": string;
            "X-Forwarded-Port": string;
            "X-Forwarded-Proto": string;
            "content-type": string;
            "user-agent": string;
            accept: string;
            "cache-control": string;
            "postman-token": string;
            host: string;
            "accept-encoding": string;
            "content-length": string;
            connection: string;
            'accept-language'?: string | undefined;
            'accept-patch'?: string | undefined;
            'accept-ranges'?: string | undefined;
            'access-control-allow-credentials'?: string | undefined;
            'access-control-allow-headers'?: string | undefined;
            'access-control-allow-methods'?: string | undefined;
            'access-control-allow-origin'?: string | undefined;
            'access-control-expose-headers'?: string | undefined;
            'access-control-max-age'?: string | undefined;
            'age'?: string | undefined;
            'allow'?: string | undefined;
            'alt-svc'?: string | undefined;
            'authorization'?: string | undefined;
            'content-disposition'?: string | undefined;
            'content-encoding'?: string | undefined;
            'content-language'?: string | undefined;
            'content-location'?: string | undefined;
            'content-range'?: string | undefined;
            'cookie'?: string | undefined;
            'date'?: string | undefined;
            'expect'?: string | undefined;
            'expires'?: string | undefined;
            'forwarded'?: string | undefined;
            'from'?: string | undefined;
            'if-match'?: string | undefined;
            'if-modified-since'?: string | undefined;
            'if-none-match'?: string | undefined;
            'if-unmodified-since'?: string | undefined;
            'last-modified'?: string | undefined;
            'location'?: string | undefined;
            'pragma'?: string | undefined;
            'proxy-authenticate'?: string | undefined;
            'proxy-authorization'?: string | undefined;
            'public-key-pins'?: string | undefined;
            'range'?: string | undefined;
            'referer'?: string | undefined;
            'retry-after'?: string | undefined;
            'set-cookie'?: string[] | undefined;
            'strict-transport-security'?: string | undefined;
            'tk'?: string | undefined;
            'trailer'?: string | undefined;
            'transfer-encoding'?: string | undefined;
            'upgrade'?: string | undefined;
            'vary'?: string | undefined;
            'via'?: string | undefined;
            'warning'?: string | undefined;
            'www-authenticate'?: string | undefined;
        };
        requestContext: {
            accountId: string;
            resourceId: string;
            stage: string;
            requestId: string;
            requestTime: string;
            requestTimeEpoch: number;
            authorizer: {
                claims: {
                    nbf: number;
                    exp: number;
                    iss: string;
                    aud: string;
                };
            };
            identity: {
                cognitoIdentityPoolId: null;
                accountId: null;
                cognitoIdentityId: null;
                caller: null;
                accessKey: null;
                sourceIp: string;
                cognitoAuthenticationType: null;
                cognitoAuthenticationProvider: null;
                userArn: null;
                userAgent: string;
                user: null;
            };
            path: string;
            resourcePath: string;
            httpMethod: string;
            apiId: string;
            protocol: string;
        };
    };
};
/**
 * Create payload for AWS lamda mock server request
 * @param options Options for AWS lamda payload
 */
export declare const requestFrom: ({ additionalHeaders, additionalClaims, body, path, resource, method, accountId, stage }: ProxyOptions) => {
    request: {
        body: any;
        headers: {
            "content-type": string;
            "user-agent": string;
            accept: string;
            "cache-control": string;
            "postman-token": string;
            host: string;
            "accept-encoding": string;
            "content-length": string;
            connection: string;
            'accept-language'?: string | undefined;
            'accept-patch'?: string | undefined;
            'accept-ranges'?: string | undefined;
            'access-control-allow-credentials'?: string | undefined;
            'access-control-allow-headers'?: string | undefined;
            'access-control-allow-methods'?: string | undefined;
            'access-control-allow-origin'?: string | undefined;
            'access-control-expose-headers'?: string | undefined;
            'access-control-max-age'?: string | undefined;
            'age'?: string | undefined;
            'allow'?: string | undefined;
            'alt-svc'?: string | undefined;
            'authorization'?: string | undefined;
            'content-disposition'?: string | undefined;
            'content-encoding'?: string | undefined;
            'content-language'?: string | undefined;
            'content-location'?: string | undefined;
            'content-range'?: string | undefined;
            'cookie'?: string | undefined;
            'date'?: string | undefined;
            'expect'?: string | undefined;
            'expires'?: string | undefined;
            'forwarded'?: string | undefined;
            'from'?: string | undefined;
            'if-match'?: string | undefined;
            'if-modified-since'?: string | undefined;
            'if-none-match'?: string | undefined;
            'if-unmodified-since'?: string | undefined;
            'last-modified'?: string | undefined;
            'location'?: string | undefined;
            'pragma'?: string | undefined;
            'proxy-authenticate'?: string | undefined;
            'proxy-authorization'?: string | undefined;
            'public-key-pins'?: string | undefined;
            'range'?: string | undefined;
            'referer'?: string | undefined;
            'retry-after'?: string | undefined;
            'set-cookie'?: string[] | undefined;
            'strict-transport-security'?: string | undefined;
            'tk'?: string | undefined;
            'trailer'?: string | undefined;
            'transfer-encoding'?: string | undefined;
            'upgrade'?: string | undefined;
            'vary'?: string | undefined;
            'via'?: string | undefined;
            'warning'?: string | undefined;
            'www-authenticate'?: string | undefined;
        };
    };
    proxy: {
        body: string | null;
        resource: string;
        path: string;
        httpMethod: string;
        isBase64Encoded: string;
        queryStringParameters: {
            foo: string;
        };
        pathParameters: {
            proxy: string;
        };
        stageVariables: {
            baz: string;
        };
        headers: {
            "CloudFront-Forwarded-Proto": string;
            "CloudFront-Is-Desktop-Viewer": string;
            "CloudFront-Is-Mobile-Viewer": string;
            "CloudFront-Is-SmartTV-Viewer": string;
            "CloudFront-Is-Tablet-Viewer": string;
            "CloudFront-Viewer-Country": string;
            "Upgrade-Insecure-Requests": string;
            Via: string;
            "X-Amz-Cf-Id": string;
            "X-Forwarded-For": string;
            "X-Forwarded-Port": string;
            "X-Forwarded-Proto": string;
            "content-type": string;
            "user-agent": string;
            accept: string;
            "cache-control": string;
            "postman-token": string;
            host: string;
            "accept-encoding": string;
            "content-length": string;
            connection: string;
            'accept-language'?: string | undefined;
            'accept-patch'?: string | undefined;
            'accept-ranges'?: string | undefined;
            'access-control-allow-credentials'?: string | undefined;
            'access-control-allow-headers'?: string | undefined;
            'access-control-allow-methods'?: string | undefined;
            'access-control-allow-origin'?: string | undefined;
            'access-control-expose-headers'?: string | undefined;
            'access-control-max-age'?: string | undefined;
            'age'?: string | undefined;
            'allow'?: string | undefined;
            'alt-svc'?: string | undefined;
            'authorization'?: string | undefined;
            'content-disposition'?: string | undefined;
            'content-encoding'?: string | undefined;
            'content-language'?: string | undefined;
            'content-location'?: string | undefined;
            'content-range'?: string | undefined;
            'cookie'?: string | undefined;
            'date'?: string | undefined;
            'expect'?: string | undefined;
            'expires'?: string | undefined;
            'forwarded'?: string | undefined;
            'from'?: string | undefined;
            'if-match'?: string | undefined;
            'if-modified-since'?: string | undefined;
            'if-none-match'?: string | undefined;
            'if-unmodified-since'?: string | undefined;
            'last-modified'?: string | undefined;
            'location'?: string | undefined;
            'pragma'?: string | undefined;
            'proxy-authenticate'?: string | undefined;
            'proxy-authorization'?: string | undefined;
            'public-key-pins'?: string | undefined;
            'range'?: string | undefined;
            'referer'?: string | undefined;
            'retry-after'?: string | undefined;
            'set-cookie'?: string[] | undefined;
            'strict-transport-security'?: string | undefined;
            'tk'?: string | undefined;
            'trailer'?: string | undefined;
            'transfer-encoding'?: string | undefined;
            'upgrade'?: string | undefined;
            'vary'?: string | undefined;
            'via'?: string | undefined;
            'warning'?: string | undefined;
            'www-authenticate'?: string | undefined;
        };
        requestContext: {
            accountId: string;
            resourceId: string;
            stage: string;
            requestId: string;
            requestTime: string;
            requestTimeEpoch: number;
            authorizer: {
                claims: {
                    nbf: number;
                    exp: number;
                    iss: string;
                    aud: string;
                };
            };
            identity: {
                cognitoIdentityPoolId: null;
                accountId: null;
                cognitoIdentityId: null;
                caller: null;
                accessKey: null;
                sourceIp: string;
                cognitoAuthenticationType: null;
                cognitoAuthenticationProvider: null;
                userArn: null;
                userAgent: string;
                user: null;
            };
            path: string;
            resourcePath: string;
            httpMethod: string;
            apiId: string;
            protocol: string;
        };
    };
};
